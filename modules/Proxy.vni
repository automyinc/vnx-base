package vnx;

module Proxy {
	
	string address;						// URL to connect to
	
	vector<string> import_list;			// list of topics to import (ie. subscribe)
	vector<string> export_list;			// list of topics to export
	vector<string> forward_list;		// list of services to import (ie. forward requests)
	
	map<Hash64, string> tunnel_map;		// service tunnels (local alias -> remote service name)
	
	map<TopicPtr, TopicPtr> import_map;		// remap a topic or domain (remote name -> local name)
	map<TopicPtr, TopicPtr> export_map;		// remap a topic or domain (local name -> remote name)
	
	Hash64 receive_tunnel;				// optional pipe to send all samples to
	Hash64 request_tunnel;				// optional pipe to send all requests to
	
	bool auto_import = false;			// import all topics that are currently subscribed
	bool time_sync = false;				// if to sync time with remote process
	
	int max_queue_ms = 100;
	int max_hop_count = 10;
	
	void enable_import(string topic_name);
	void disable_import(string topic_name);
	
	void enable_export(string topic_name);
	void disable_export(string topic_name);
	
	void enable_forward(string service_name, int max_queue_ms);
	void disable_forward(string service_name);
	
	void enable_tunnel(Hash64 tunnel_addr, string service_name, int max_queue_ms);
	void disable_tunnel(Hash64 tunnel_addr);
	
	void on_connect();					// internal use only
	void on_disconnect();				// internal use only
	void on_remote_connect(Hash64 process_id);		// internal use only, called from other end
	
}
