package vnx;

module Proxy {
	
	string address;						// URL to connect to
	
	vector<TopicPtr> import_list;		// list of topics to import (ie. subscribe)
	vector<TopicPtr> export_list;		// list of topics to export
	vector<string> forward_list;		// list of services to import (ie. forward requests)
	
	map<Hash64, string> tunnel_map;		// service tunnels (local alias -> remote service name)
	
	map<TopicPtr, TopicPtr> import_map;		// remap a topic or domain (remote name -> local name)
	map<TopicPtr, TopicPtr> export_map;		// remap a topic or domain (local name -> remote name)
	
	Hash64 receive_tunnel;				// optional pipe to send all samples to
	Hash64 request_tunnel;				// optional pipe to send all requests to
	
	bool auto_import = false;			// import all topics that are currently subscribed
	bool time_sync = false;				// if to sync time with remote process
	bool use_authentication = false;	// if to require authentication from client
	bool block_until_connect = true;	// block request pipes until first successful connect
	bool block_until_reconnect = false;	// block request pipes until next successful re-connect
	
	int max_queue_ms = 100;				// [ms]
	int max_hop_count = 10;				// to limit network cycles [1]
	
	string default_access = "DEFAULT";	// default access role for anonymous clients (if use_authentication == true)
	
	
	@Permission(LOCAL)
	Session* login(string name, string password) const async;
	
	@Permission(PROXY_IMPORT)
	void enable_import(string topic_name);
	
	@Permission(PROXY_IMPORT)
	void disable_import(string topic_name);
	
	@Permission(PROXY_EXPORT)
	void enable_export(string topic_name);
	
	@Permission(PROXY_EXPORT)
	void disable_export(string topic_name);
	
	@Permission(PROXY_FORWARD)
	void enable_forward(string service_name, int max_queue_ms);
	
	@Permission(PROXY_FORWARD)
	void disable_forward(string service_name);
	
	@Permission(PROXY_FORWARD)
	void enable_tunnel(Hash64 tunnel_addr, string service_name, int max_queue_ms);
	
	@Permission(PROXY_FORWARD)
	void disable_tunnel(Hash64 tunnel_addr);
	
	Hash64 wait_on_connect() const async;		// returns remote process id when connected
	
	@Permission(INTERNAL)
	void on_connect();					// internal use only
	
	@Permission(INTERNAL)
	void on_disconnect();				// internal use only
	
	@Permission(PROXY_INTERNAL)
	void on_remote_connect(Hash64 process_id);			// internal use only, called from other end

	@Permission(PROXY_INTERNAL)
	void on_login(string name, string password);		// internal use only, called from other end
	
	@Permission(PROXY_INTERNAL)
	void on_remote_login(Session* remote_session);		// internal use only, called from other end
	
}
