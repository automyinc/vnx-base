package vnx;

module Process {
	
	int log_file_level = 2;						// log level for file logging
	int update_interval_ms = 500;				// publish interval for vnx.topic_info, etc
	
	uint log_history_size = 10000;				// max number of log messages to hold in history
	uint error_history_size = 100;				// max number of error messages to hold in history
	
	string log_file_name;						// optional file to write log messages to
	string log_file_name_suffix = "_%Y_%m_%d.txt";			// optional suffix for log file name
	string log_file_entry_prefix = "%Y-%m-%d %H:%M:%S ";	// timestamp format for log file
	
	bool log_file_auto_restart = true;			// if to start new log file when name changes
	
	
	@Permission(VIEW)
	string get_name() const;					// get process name
	
	@Permission(TIME_SYNC)
	TimeSync get_sync_time() const;
	
	@Permission(VIEW)
	vector<TopicInfo> get_topic_info(bool include_domains) const;
	
	@Permission(VIEW)
	vector<ModuleInfo> get_module_info() const;
	
	@Permission(VIEW)
	ProcessInfo get_process_info() const;
	
	@Permission(READ_CONFIG)
	Variant get_global_config(string key) const;
	
	@Permission(WRITE_CONFIG)
	void set_global_config(string key, Variant value);
	
	void reload_config();						// reload config trees from file system
	
	@Permission(LOCAL)
	void pause_log();							// pause terminal logging output
	
	@Permission(LOCAL)
	void resume_log();							// resume terminal logging output
	
	@Permission(LOCAL)
	void set_debug(int level);					// set terminal logging output level
	
	@Permission(LOCAL)
	void show_error_log();
	
	@Permission(LOCAL)
	void grep_log(string expr);
	
	@Permission(LOCAL)
	void journal_log(string expr);
	
	@Permission(LOCAL)
	void ungrep_log();
	
	@Permission(SHUTDOWN)
	void trigger_shutdown();					// shutdown whole process
	
	@Permission(SELF_TEST)
	void self_test_all() async;
	
	void handle(LogMsg sample);
	void handle(TimeControl sample);
	void handle(TimeSync sample);
	void handle(ModuleInfo sample);
	
}
