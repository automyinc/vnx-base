
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_Process_ASYNC_CLIENT_HXX_
#define INCLUDE_vnx_Process_ASYNC_CLIENT_HXX_

#include <vnx/AsyncClient.h>
#include <vnx/LogMsg.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInfo.hxx>
#include <vnx/ProcessInfo.hxx>
#include <vnx/TimeControl.hxx>
#include <vnx/TimeSync.hxx>
#include <vnx/TopicInfoList.hxx>


namespace vnx {

class ProcessAsyncClient : public vnx::AsyncClient {
public:
	ProcessAsyncClient(const std::string& service_name);
	
	ProcessAsyncClient(vnx::Hash64 service_addr);
	
	uint64_t close(
			const std::function<void()>& _callback = std::function<void()>());
	
	uint64_t get_name(
			const std::function<void(std::string)>& _callback = std::function<void(std::string)>());
	
	uint64_t get_process_info(
			const std::function<void(::vnx::ProcessInfo)>& _callback = std::function<void(::vnx::ProcessInfo)>());
	
	uint64_t get_sync_time(
			const std::function<void(::vnx::TimeSync)>& _callback = std::function<void(::vnx::TimeSync)>());
	
	uint64_t get_topic_info(
			const std::function<void(::vnx::TopicInfoList)>& _callback = std::function<void(::vnx::TopicInfoList)>());
	
	uint64_t pause_log(
			const std::function<void()>& _callback = std::function<void()>());
	
	uint64_t resume_log(
			const std::function<void()>& _callback = std::function<void()>());
	
	uint64_t set_debug(const int32_t& level, 
			const std::function<void()>& _callback = std::function<void()>());
	
	std::vector<uint64_t> vnx_get_pending_ids() const override;
	
protected:
	void vnx_purge_request(uint64_t _request_id) override;
	
	void vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) override;
	
private:
	std::map<uint64_t, std::function<void()>> vnx_queue_close;
	std::map<uint64_t, std::function<void(std::string)>> vnx_queue_get_name;
	std::map<uint64_t, std::function<void(::vnx::ProcessInfo)>> vnx_queue_get_process_info;
	std::map<uint64_t, std::function<void(::vnx::TimeSync)>> vnx_queue_get_sync_time;
	std::map<uint64_t, std::function<void(::vnx::TopicInfoList)>> vnx_queue_get_topic_info;
	std::map<uint64_t, std::function<void()>> vnx_queue_pause_log;
	std::map<uint64_t, std::function<void()>> vnx_queue_resume_log;
	std::map<uint64_t, std::function<void()>> vnx_queue_set_debug;
	
};


} // namespace vnx

#endif // INCLUDE_vnx_Process_ASYNC_CLIENT_HXX_
