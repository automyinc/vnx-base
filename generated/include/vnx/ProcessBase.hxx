
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_ProcessBase_HXX_
#define INCLUDE_vnx_ProcessBase_HXX_

#include <vnx/package.hxx>
#include <vnx/LogMsg.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInfo.hxx>
#include <vnx/ProcessInfo.hxx>
#include <vnx/TimeControl.hxx>
#include <vnx/TimeSync.hxx>
#include <vnx/TopicInfoList.hxx>


namespace vnx {

class ProcessBase : public ::vnx::Module {
public:
	
	int32_t topic_info_interval_ms = 500;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	ProcessBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const ProcessBase& _value);
	friend std::istream& operator>>(std::istream& _in, ProcessBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	virtual std::string get_name() const = 0;
	virtual ::vnx::TimeSync get_sync_time() const = 0;
	virtual ::vnx::TopicInfoList get_topic_info() const = 0;
	virtual ::vnx::ProcessInfo get_process_info() const = 0;
	virtual void pause_log() = 0;
	virtual void resume_log() = 0;
	virtual void set_debug(const int32_t& level) = 0;
	virtual void close() = 0;
	virtual void handle(std::shared_ptr<const ::vnx::LogMsg> _value, std::shared_ptr<const vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::LogMsg> _value) {}
	virtual void handle(std::shared_ptr<const ::vnx::TimeControl> _value, std::shared_ptr<const vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::TimeControl> _value) {}
	virtual void handle(std::shared_ptr<const ::vnx::TimeSync> _value, std::shared_ptr<const vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::TimeSync> _value) {}
	virtual void handle(std::shared_ptr<const ::vnx::ModuleInfo> _value, std::shared_ptr<const vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::ModuleInfo> _value) {}
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace vnx

#endif // INCLUDE_vnx_ProcessBase_HXX_
