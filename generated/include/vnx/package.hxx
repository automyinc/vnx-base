
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_PACKAGE_HXX_
#define INCLUDE_vnx_PACKAGE_HXX_

#include <vnx/Type.h>



namespace vnx {

extern vnx::TopicPtr log_out;
extern vnx::TopicPtr module_info;
extern vnx::TopicPtr shutdown;
extern vnx::TopicPtr time_control;
extern vnx::TopicPtr time_sync;
extern vnx::TopicPtr topic_info;

class BaseProxyBase;
class BaseServerBase;
class Buffer;
class Endpoint;
class Exception;
class FlowMessage;
class Frame;
class GatewayBase;
class GatewayInterface;
class GatewayInterface_forward;
class GatewayInterface_forward_return;
class Generic;
class Hash128;
class Hash64;
class InternalError;
class JRPC_Error;
class JRPC_Failure;
class JRPC_Notification;
class JRPC_ProxyBase;
class JRPC_Proxy_select_service;
class JRPC_Proxy_select_service_return;
class JRPC_Request;
class JRPC_Response;
class JRPC_ServerBase;
class JRPC_Success;
class LogMsg;
class Marker;
class Memory;
class Message;
class ModuleInfo;
class ModuleInterface;
class ModuleInterface_vnx_get_config;
class ModuleInterface_vnx_get_config_return;
class ModuleInterface_vnx_get_config_object;
class ModuleInterface_vnx_get_config_object_return;
class ModuleInterface_vnx_get_module_info;
class ModuleInterface_vnx_get_module_info_return;
class ModuleInterface_vnx_get_type_code;
class ModuleInterface_vnx_get_type_code_return;
class ModuleInterface_vnx_restart;
class ModuleInterface_vnx_restart_return;
class ModuleInterface_vnx_self_test;
class ModuleInterface_vnx_self_test_return;
class ModuleInterface_vnx_set_config;
class ModuleInterface_vnx_set_config_return;
class ModuleInterface_vnx_set_config_object;
class ModuleInterface_vnx_set_config_object_return;
class ModuleInterface_vnx_stop;
class ModuleInterface_vnx_stop_return;
class NoSuchMethod;
class NoSuchService;
class Object;
class OverflowException;
class PermissionDenied;
class PlayerBase;
class Player_get_info;
class Player_get_info_return;
class Player_pause;
class Player_pause_return;
class Player_play;
class Player_play_return;
class Player_seek_by_count;
class Player_seek_by_count_return;
class Player_seek_by_time;
class Player_seek_by_time_return;
class Player_seek_to_position;
class Player_seek_to_position_return;
class Player_seek_to_time;
class Player_seek_to_time_return;
class Player_set_speed;
class Player_set_speed_return;
class Player_stop;
class Player_stop_return;
class Player_toggle;
class Player_toggle_return;
class PlayerStatus;
class ProcessBase;
class Process_get_global_config;
class Process_get_global_config_return;
class Process_get_module_info;
class Process_get_module_info_return;
class Process_get_name;
class Process_get_name_return;
class Process_get_process_info;
class Process_get_process_info_return;
class Process_get_sync_time;
class Process_get_sync_time_return;
class Process_get_topic_info;
class Process_get_topic_info_return;
class Process_grep_log;
class Process_grep_log_return;
class Process_journal_log;
class Process_journal_log_return;
class Process_pause_log;
class Process_pause_log_return;
class Process_reload_config;
class Process_reload_config_return;
class Process_resume_log;
class Process_resume_log_return;
class Process_self_test_all;
class Process_self_test_all_return;
class Process_set_debug;
class Process_set_debug_return;
class Process_set_global_config;
class Process_set_global_config_return;
class Process_show_error_log;
class Process_show_error_log_return;
class Process_trigger_shutdown;
class Process_trigger_shutdown_return;
class Process_ungrep_log;
class Process_ungrep_log_return;
class ProcessInfo;
class ProxyBase;
class ProxyInterface;
class ProxyInterface_disable_export;
class ProxyInterface_disable_export_return;
class ProxyInterface_disable_forward;
class ProxyInterface_disable_forward_return;
class ProxyInterface_disable_import;
class ProxyInterface_disable_import_return;
class ProxyInterface_disable_tunnel;
class ProxyInterface_disable_tunnel_return;
class ProxyInterface_enable_export;
class ProxyInterface_enable_export_return;
class ProxyInterface_enable_forward;
class ProxyInterface_enable_forward_return;
class ProxyInterface_enable_import;
class ProxyInterface_enable_import_return;
class ProxyInterface_enable_tunnel;
class ProxyInterface_enable_tunnel_return;
class ProxyInterface_login;
class ProxyInterface_login_return;
class ProxyInterface_on_connect;
class ProxyInterface_on_connect_return;
class ProxyInterface_on_disconnect;
class ProxyInterface_on_disconnect_return;
class ProxyInterface_on_login;
class ProxyInterface_on_login_return;
class ProxyInterface_on_remote_connect;
class ProxyInterface_on_remote_connect_return;
class ProxyInterface_on_remote_login;
class ProxyInterface_on_remote_login_return;
class ProxyInterface_wait_on_connect;
class ProxyInterface_wait_on_connect_return;
class ProxyInterface_wait_on_disconnect;
class ProxyInterface_wait_on_disconnect_return;
class RecordHeader;
class RecordIndex;
class RecordPointer;
class RecorderBase;
class RecorderStatus;
class Request;
class RequestQueueBase;
class RequestQueue_clear;
class RequestQueue_clear_return;
class RequestQueue_purge;
class RequestQueue_purge_return;
class Return;
class RouterBase;
class Sample;
class ServerBase;
class Session;
class SpyToolBase;
class TcpEndpoint;
class TerminalBase;
class Terminal_read_char;
class Terminal_read_char_return;
class Terminal_read_event;
class Terminal_read_event_return;
class TimeControl;
class TimeServerBase;
class TimeSync;
class TopicInfo;
class TopicInfoList;
class TopicPtr;
class Tuple;
class TypeCode;
class UnixEndpoint;
class User;
class Variant;
struct access_role_e;
struct permission_e;
struct record_index_entry_t;
struct record_topic_info_t;
struct terminal_event_e;
struct thread_priority_e;

extern const vnx::TypeCode* const vnx_native_type_code_BaseProxyBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_BaseServerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Endpoint; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Exception; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_FlowMessage; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Frame; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_GatewayBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_GatewayInterface_forward; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_GatewayInterface_forward_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Generic; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_InternalError; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Error; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Failure; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Notification; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_ProxyBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Proxy_select_service; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Proxy_select_service_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Request; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Response; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_ServerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_JRPC_Success; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_LogMsg; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Marker; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Message; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInfo; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_config_object; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_config_object_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_module_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_module_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_type_code; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_get_type_code_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_restart; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_restart_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_self_test; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_self_test_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_set_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_set_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_set_config_object; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_set_config_object_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_stop; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleInterface_vnx_stop_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_NoSuchMethod; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_NoSuchService; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_OverflowException; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PermissionDenied; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlayerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_get_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_get_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_pause; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_pause_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_play; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_play_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_by_count; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_by_count_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_by_time; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_by_time_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_to_position; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_to_position_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_to_time; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_seek_to_time_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_set_speed; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_set_speed_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_stop; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_stop_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_toggle; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Player_toggle_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlayerStatus; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProcessBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_global_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_global_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_module_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_module_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_name; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_name_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_process_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_process_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_sync_time; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_sync_time_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_topic_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_get_topic_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_grep_log; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_grep_log_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_journal_log; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_journal_log_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_pause_log; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_pause_log_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_reload_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_reload_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_resume_log; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_resume_log_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_self_test_all; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_self_test_all_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_set_debug; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_set_debug_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_set_global_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_set_global_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_show_error_log; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_show_error_log_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_trigger_shutdown; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_trigger_shutdown_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_ungrep_log; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Process_ungrep_log_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProcessInfo; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_export; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_export_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_forward; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_forward_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_import; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_import_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_tunnel; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_disable_tunnel_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_export; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_export_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_forward; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_forward_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_import; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_import_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_tunnel; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_enable_tunnel_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_login; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_login_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_connect; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_connect_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_disconnect; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_disconnect_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_login; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_login_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_remote_connect; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_remote_connect_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_remote_login; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_on_remote_login_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_wait_on_connect; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_wait_on_connect_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_wait_on_disconnect; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProxyInterface_wait_on_disconnect_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RecordHeader; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RecordIndex; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RecordPointer; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RecorderBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RecorderStatus; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Request; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RequestQueueBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RequestQueue_clear; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RequestQueue_clear_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RequestQueue_purge; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RequestQueue_purge_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RouterBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Sample; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ServerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Session; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SpyToolBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TcpEndpoint; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TerminalBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Terminal_read_char; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Terminal_read_char_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Terminal_read_event; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Terminal_read_event_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeControl; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeServerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeSync; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TopicInfo; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TopicInfoList; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Tuple; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_UnixEndpoint; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_User; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_access_role_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_permission_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_record_index_entry_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_record_topic_info_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_terminal_event_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_thread_priority_e; ///< \private

} // namespace vnx


namespace vnx {

void read(TypeInput& in, ::vnx::BaseProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::BaseServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Buffer& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Endpoint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Exception& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::FlowMessage& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Frame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::GatewayBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::GatewayInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::GatewayInterface_forward& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::GatewayInterface_forward_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Generic& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Hash128& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Hash64& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::InternalError& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Error& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Failure& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Notification& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_ProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Proxy_select_service& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Proxy_select_service_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Response& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::JRPC_Success& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::LogMsg& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Marker& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Memory& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Message& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config_object& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config_object_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_module_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_type_code& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_type_code_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_restart& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_restart_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_self_test& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_self_test_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config_object& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config_object_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_stop& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ModuleInterface_vnx_stop_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::NoSuchMethod& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::NoSuchService& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Object& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::OverflowException& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::PermissionDenied& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::PlayerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_get_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_get_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_pause& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_pause_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_play& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_play_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_by_count& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_by_count_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_by_time& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_by_time_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_to_position& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_to_position_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_to_time& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_seek_to_time_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_set_speed& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_set_speed_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_stop& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_stop_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_toggle& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Player_toggle_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::PlayerStatus& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProcessBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_global_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_global_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_module_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_name& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_name_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_process_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_process_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_sync_time& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_sync_time_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_topic_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_get_topic_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_grep_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_grep_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_journal_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_journal_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_pause_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_pause_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_reload_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_reload_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_resume_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_resume_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_self_test_all& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_self_test_all_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_set_debug& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_set_debug_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_set_global_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_set_global_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_show_error_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_show_error_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_trigger_shutdown& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_trigger_shutdown_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_ungrep_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Process_ungrep_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProcessInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_export& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_export_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_forward& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_forward_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_import& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_import_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_tunnel& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_disable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_export& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_export_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_forward& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_forward_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_import& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_import_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_tunnel& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_enable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_login& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_login_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_connect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_connect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_disconnect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_login& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_login_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_connect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_connect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_login& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_login_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_connect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_connect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_disconnect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RecordHeader& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RecordIndex& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RecordPointer& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RecorderBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RecorderStatus& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RequestQueueBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RequestQueue_clear& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RequestQueue_clear_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RequestQueue_purge& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RequestQueue_purge_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::RouterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Sample& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Session& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::SpyToolBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TcpEndpoint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TerminalBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Terminal_read_char& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Terminal_read_char_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Terminal_read_event& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Terminal_read_event_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TimeControl& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TimeServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TimeSync& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TopicInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TopicInfoList& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TopicPtr& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Tuple& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::TypeCode& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::UnixEndpoint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::User& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::Variant& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::access_role_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::record_index_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::record_topic_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::terminal_event_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::thread_priority_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::vnx::BaseProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::BaseServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Buffer& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Endpoint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Exception& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::FlowMessage& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Frame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::GatewayBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::GatewayInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::GatewayInterface_forward& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::GatewayInterface_forward_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Generic& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Hash128& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Hash64& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::InternalError& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Error& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Failure& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Notification& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_ProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Proxy_select_service& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Proxy_select_service_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Response& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::JRPC_Success& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::LogMsg& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Marker& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Memory& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Message& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config_object& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config_object_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_module_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_type_code& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_type_code_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_restart& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_restart_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_self_test& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_self_test_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config_object& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config_object_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_stop& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_stop_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::NoSuchMethod& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::NoSuchService& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Object& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::OverflowException& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::PermissionDenied& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::PlayerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_get_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_get_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_pause& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_pause_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_play& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_play_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_by_count& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_by_count_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_by_time& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_by_time_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_to_position& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_to_position_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_to_time& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_seek_to_time_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_set_speed& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_set_speed_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_stop& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_stop_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_toggle& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Player_toggle_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::PlayerStatus& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProcessBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_global_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_global_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_module_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_name& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_name_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_process_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_process_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_sync_time& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_sync_time_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_topic_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_get_topic_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_grep_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_grep_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_journal_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_journal_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_pause_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_pause_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_reload_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_reload_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_resume_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_resume_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_self_test_all& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_self_test_all_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_set_debug& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_set_debug_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_set_global_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_set_global_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_show_error_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_show_error_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_trigger_shutdown& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_trigger_shutdown_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_ungrep_log& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Process_ungrep_log_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProcessInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_export& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_export_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_forward& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_forward_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_import& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_import_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_tunnel& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_export& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_export_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_forward& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_forward_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_import& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_import_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_tunnel& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_login& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_login_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_connect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_connect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_disconnect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_login& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_login_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_connect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_connect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_login& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_login_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_connect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_connect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_disconnect& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RecordHeader& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RecordIndex& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RecordPointer& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RecorderBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RecorderStatus& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RequestQueueBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RequestQueue_clear& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RequestQueue_clear_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RequestQueue_purge& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RequestQueue_purge_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::RouterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Sample& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Session& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::SpyToolBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TcpEndpoint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TerminalBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Terminal_read_char& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Terminal_read_char_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Terminal_read_event& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Terminal_read_event_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TimeControl& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TimeServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TimeSync& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TopicInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TopicInfoList& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TopicPtr& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Tuple& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::TypeCode& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::UnixEndpoint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::User& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::Variant& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::access_role_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::record_index_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::record_topic_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::terminal_event_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::thread_priority_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::vnx::BaseProxyBase& value); ///< \private
void read(std::istream& in, ::vnx::BaseServerBase& value); ///< \private
void read(std::istream& in, ::vnx::Buffer& value); ///< \private
void read(std::istream& in, ::vnx::Endpoint& value); ///< \private
void read(std::istream& in, ::vnx::Exception& value); ///< \private
void read(std::istream& in, ::vnx::FlowMessage& value); ///< \private
void read(std::istream& in, ::vnx::Frame& value); ///< \private
void read(std::istream& in, ::vnx::GatewayBase& value); ///< \private
void read(std::istream& in, ::vnx::GatewayInterface& value); ///< \private
void read(std::istream& in, ::vnx::GatewayInterface_forward& value); ///< \private
void read(std::istream& in, ::vnx::GatewayInterface_forward_return& value); ///< \private
void read(std::istream& in, ::vnx::Generic& value); ///< \private
void read(std::istream& in, ::vnx::Hash128& value); ///< \private
void read(std::istream& in, ::vnx::Hash64& value); ///< \private
void read(std::istream& in, ::vnx::InternalError& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Error& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Failure& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Notification& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_ProxyBase& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Proxy_select_service& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Proxy_select_service_return& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Request& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Response& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_ServerBase& value); ///< \private
void read(std::istream& in, ::vnx::JRPC_Success& value); ///< \private
void read(std::istream& in, ::vnx::LogMsg& value); ///< \private
void read(std::istream& in, ::vnx::Marker& value); ///< \private
void read(std::istream& in, ::vnx::Memory& value); ///< \private
void read(std::istream& in, ::vnx::Message& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInfo& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config_object& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config_object_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_module_info& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_module_info_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_type_code& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_type_code_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_restart& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_restart_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_self_test& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_self_test_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config_object& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config_object_return& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_stop& value); ///< \private
void read(std::istream& in, ::vnx::ModuleInterface_vnx_stop_return& value); ///< \private
void read(std::istream& in, ::vnx::NoSuchMethod& value); ///< \private
void read(std::istream& in, ::vnx::NoSuchService& value); ///< \private
void read(std::istream& in, ::vnx::Object& value); ///< \private
void read(std::istream& in, ::vnx::OverflowException& value); ///< \private
void read(std::istream& in, ::vnx::PermissionDenied& value); ///< \private
void read(std::istream& in, ::vnx::PlayerBase& value); ///< \private
void read(std::istream& in, ::vnx::Player_get_info& value); ///< \private
void read(std::istream& in, ::vnx::Player_get_info_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_pause& value); ///< \private
void read(std::istream& in, ::vnx::Player_pause_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_play& value); ///< \private
void read(std::istream& in, ::vnx::Player_play_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_by_count& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_by_count_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_by_time& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_by_time_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_to_position& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_to_position_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_to_time& value); ///< \private
void read(std::istream& in, ::vnx::Player_seek_to_time_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_set_speed& value); ///< \private
void read(std::istream& in, ::vnx::Player_set_speed_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_stop& value); ///< \private
void read(std::istream& in, ::vnx::Player_stop_return& value); ///< \private
void read(std::istream& in, ::vnx::Player_toggle& value); ///< \private
void read(std::istream& in, ::vnx::Player_toggle_return& value); ///< \private
void read(std::istream& in, ::vnx::PlayerStatus& value); ///< \private
void read(std::istream& in, ::vnx::ProcessBase& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_global_config& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_global_config_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_module_info& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_module_info_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_name& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_name_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_process_info& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_process_info_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_sync_time& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_sync_time_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_topic_info& value); ///< \private
void read(std::istream& in, ::vnx::Process_get_topic_info_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_grep_log& value); ///< \private
void read(std::istream& in, ::vnx::Process_grep_log_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_journal_log& value); ///< \private
void read(std::istream& in, ::vnx::Process_journal_log_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_pause_log& value); ///< \private
void read(std::istream& in, ::vnx::Process_pause_log_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_reload_config& value); ///< \private
void read(std::istream& in, ::vnx::Process_reload_config_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_resume_log& value); ///< \private
void read(std::istream& in, ::vnx::Process_resume_log_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_self_test_all& value); ///< \private
void read(std::istream& in, ::vnx::Process_self_test_all_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_set_debug& value); ///< \private
void read(std::istream& in, ::vnx::Process_set_debug_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_set_global_config& value); ///< \private
void read(std::istream& in, ::vnx::Process_set_global_config_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_show_error_log& value); ///< \private
void read(std::istream& in, ::vnx::Process_show_error_log_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_trigger_shutdown& value); ///< \private
void read(std::istream& in, ::vnx::Process_trigger_shutdown_return& value); ///< \private
void read(std::istream& in, ::vnx::Process_ungrep_log& value); ///< \private
void read(std::istream& in, ::vnx::Process_ungrep_log_return& value); ///< \private
void read(std::istream& in, ::vnx::ProcessInfo& value); ///< \private
void read(std::istream& in, ::vnx::ProxyBase& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_export& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_export_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_forward& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_forward_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_import& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_import_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_tunnel& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_disable_tunnel_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_export& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_export_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_forward& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_forward_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_import& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_import_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_tunnel& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_enable_tunnel_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_login& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_login_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_connect& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_connect_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_disconnect& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_disconnect_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_login& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_login_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_remote_connect& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_remote_connect_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_remote_login& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_on_remote_login_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_wait_on_connect& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_wait_on_connect_return& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_wait_on_disconnect& value); ///< \private
void read(std::istream& in, ::vnx::ProxyInterface_wait_on_disconnect_return& value); ///< \private
void read(std::istream& in, ::vnx::RecordHeader& value); ///< \private
void read(std::istream& in, ::vnx::RecordIndex& value); ///< \private
void read(std::istream& in, ::vnx::RecordPointer& value); ///< \private
void read(std::istream& in, ::vnx::RecorderBase& value); ///< \private
void read(std::istream& in, ::vnx::RecorderStatus& value); ///< \private
void read(std::istream& in, ::vnx::Request& value); ///< \private
void read(std::istream& in, ::vnx::RequestQueueBase& value); ///< \private
void read(std::istream& in, ::vnx::RequestQueue_clear& value); ///< \private
void read(std::istream& in, ::vnx::RequestQueue_clear_return& value); ///< \private
void read(std::istream& in, ::vnx::RequestQueue_purge& value); ///< \private
void read(std::istream& in, ::vnx::RequestQueue_purge_return& value); ///< \private
void read(std::istream& in, ::vnx::Return& value); ///< \private
void read(std::istream& in, ::vnx::RouterBase& value); ///< \private
void read(std::istream& in, ::vnx::Sample& value); ///< \private
void read(std::istream& in, ::vnx::ServerBase& value); ///< \private
void read(std::istream& in, ::vnx::Session& value); ///< \private
void read(std::istream& in, ::vnx::SpyToolBase& value); ///< \private
void read(std::istream& in, ::vnx::TcpEndpoint& value); ///< \private
void read(std::istream& in, ::vnx::TerminalBase& value); ///< \private
void read(std::istream& in, ::vnx::Terminal_read_char& value); ///< \private
void read(std::istream& in, ::vnx::Terminal_read_char_return& value); ///< \private
void read(std::istream& in, ::vnx::Terminal_read_event& value); ///< \private
void read(std::istream& in, ::vnx::Terminal_read_event_return& value); ///< \private
void read(std::istream& in, ::vnx::TimeControl& value); ///< \private
void read(std::istream& in, ::vnx::TimeServerBase& value); ///< \private
void read(std::istream& in, ::vnx::TimeSync& value); ///< \private
void read(std::istream& in, ::vnx::TopicInfo& value); ///< \private
void read(std::istream& in, ::vnx::TopicInfoList& value); ///< \private
void read(std::istream& in, ::vnx::TopicPtr& value); ///< \private
void read(std::istream& in, ::vnx::Tuple& value); ///< \private
void read(std::istream& in, ::vnx::TypeCode& value); ///< \private
void read(std::istream& in, ::vnx::UnixEndpoint& value); ///< \private
void read(std::istream& in, ::vnx::User& value); ///< \private
void read(std::istream& in, ::vnx::Variant& value); ///< \private
void read(std::istream& in, ::vnx::access_role_e& value); ///< \private
void read(std::istream& in, ::vnx::permission_e& value); ///< \private
void read(std::istream& in, ::vnx::record_index_entry_t& value); ///< \private
void read(std::istream& in, ::vnx::record_topic_info_t& value); ///< \private
void read(std::istream& in, ::vnx::terminal_event_e& value); ///< \private
void read(std::istream& in, ::vnx::thread_priority_e& value); ///< \private

void write(std::ostream& out, const ::vnx::BaseProxyBase& value); ///< \private
void write(std::ostream& out, const ::vnx::BaseServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::Buffer& value); ///< \private
void write(std::ostream& out, const ::vnx::Endpoint& value); ///< \private
void write(std::ostream& out, const ::vnx::Exception& value); ///< \private
void write(std::ostream& out, const ::vnx::FlowMessage& value); ///< \private
void write(std::ostream& out, const ::vnx::Frame& value); ///< \private
void write(std::ostream& out, const ::vnx::GatewayBase& value); ///< \private
void write(std::ostream& out, const ::vnx::GatewayInterface& value); ///< \private
void write(std::ostream& out, const ::vnx::GatewayInterface_forward& value); ///< \private
void write(std::ostream& out, const ::vnx::GatewayInterface_forward_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Generic& value); ///< \private
void write(std::ostream& out, const ::vnx::Hash128& value); ///< \private
void write(std::ostream& out, const ::vnx::Hash64& value); ///< \private
void write(std::ostream& out, const ::vnx::InternalError& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Error& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Failure& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Notification& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_ProxyBase& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Proxy_select_service& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Proxy_select_service_return& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Request& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Response& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_ServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::JRPC_Success& value); ///< \private
void write(std::ostream& out, const ::vnx::LogMsg& value); ///< \private
void write(std::ostream& out, const ::vnx::Marker& value); ///< \private
void write(std::ostream& out, const ::vnx::Memory& value); ///< \private
void write(std::ostream& out, const ::vnx::Message& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInfo& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config_object& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config_object_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_module_info& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_module_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_type_code& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_type_code_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_restart& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_restart_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_self_test& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_self_test_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config_object& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config_object_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_stop& value); ///< \private
void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_stop_return& value); ///< \private
void write(std::ostream& out, const ::vnx::NoSuchMethod& value); ///< \private
void write(std::ostream& out, const ::vnx::NoSuchService& value); ///< \private
void write(std::ostream& out, const ::vnx::Object& value); ///< \private
void write(std::ostream& out, const ::vnx::OverflowException& value); ///< \private
void write(std::ostream& out, const ::vnx::PermissionDenied& value); ///< \private
void write(std::ostream& out, const ::vnx::PlayerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_get_info& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_get_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_pause& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_pause_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_play& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_play_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_by_count& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_by_count_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_by_time& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_by_time_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_to_position& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_to_position_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_to_time& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_seek_to_time_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_set_speed& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_set_speed_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_stop& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_stop_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_toggle& value); ///< \private
void write(std::ostream& out, const ::vnx::Player_toggle_return& value); ///< \private
void write(std::ostream& out, const ::vnx::PlayerStatus& value); ///< \private
void write(std::ostream& out, const ::vnx::ProcessBase& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_global_config& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_global_config_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_module_info& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_module_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_name& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_name_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_process_info& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_process_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_sync_time& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_sync_time_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_topic_info& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_get_topic_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_grep_log& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_grep_log_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_journal_log& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_journal_log_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_pause_log& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_pause_log_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_reload_config& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_reload_config_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_resume_log& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_resume_log_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_self_test_all& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_self_test_all_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_set_debug& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_set_debug_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_set_global_config& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_set_global_config_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_show_error_log& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_show_error_log_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_trigger_shutdown& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_trigger_shutdown_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_ungrep_log& value); ///< \private
void write(std::ostream& out, const ::vnx::Process_ungrep_log_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProcessInfo& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyBase& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_export& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_export_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_forward& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_forward_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_import& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_import_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_tunnel& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_disable_tunnel_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_export& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_export_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_forward& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_forward_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_import& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_import_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_tunnel& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_enable_tunnel_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_login& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_login_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_connect& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_connect_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_disconnect& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_disconnect_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_login& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_login_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_connect& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_connect_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_login& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_login_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_connect& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_connect_return& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_disconnect& value); ///< \private
void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_disconnect_return& value); ///< \private
void write(std::ostream& out, const ::vnx::RecordHeader& value); ///< \private
void write(std::ostream& out, const ::vnx::RecordIndex& value); ///< \private
void write(std::ostream& out, const ::vnx::RecordPointer& value); ///< \private
void write(std::ostream& out, const ::vnx::RecorderBase& value); ///< \private
void write(std::ostream& out, const ::vnx::RecorderStatus& value); ///< \private
void write(std::ostream& out, const ::vnx::Request& value); ///< \private
void write(std::ostream& out, const ::vnx::RequestQueueBase& value); ///< \private
void write(std::ostream& out, const ::vnx::RequestQueue_clear& value); ///< \private
void write(std::ostream& out, const ::vnx::RequestQueue_clear_return& value); ///< \private
void write(std::ostream& out, const ::vnx::RequestQueue_purge& value); ///< \private
void write(std::ostream& out, const ::vnx::RequestQueue_purge_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Return& value); ///< \private
void write(std::ostream& out, const ::vnx::RouterBase& value); ///< \private
void write(std::ostream& out, const ::vnx::Sample& value); ///< \private
void write(std::ostream& out, const ::vnx::ServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::Session& value); ///< \private
void write(std::ostream& out, const ::vnx::SpyToolBase& value); ///< \private
void write(std::ostream& out, const ::vnx::TcpEndpoint& value); ///< \private
void write(std::ostream& out, const ::vnx::TerminalBase& value); ///< \private
void write(std::ostream& out, const ::vnx::Terminal_read_char& value); ///< \private
void write(std::ostream& out, const ::vnx::Terminal_read_char_return& value); ///< \private
void write(std::ostream& out, const ::vnx::Terminal_read_event& value); ///< \private
void write(std::ostream& out, const ::vnx::Terminal_read_event_return& value); ///< \private
void write(std::ostream& out, const ::vnx::TimeControl& value); ///< \private
void write(std::ostream& out, const ::vnx::TimeServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::TimeSync& value); ///< \private
void write(std::ostream& out, const ::vnx::TopicInfo& value); ///< \private
void write(std::ostream& out, const ::vnx::TopicInfoList& value); ///< \private
void write(std::ostream& out, const ::vnx::TopicPtr& value); ///< \private
void write(std::ostream& out, const ::vnx::Tuple& value); ///< \private
void write(std::ostream& out, const ::vnx::TypeCode& value); ///< \private
void write(std::ostream& out, const ::vnx::UnixEndpoint& value); ///< \private
void write(std::ostream& out, const ::vnx::User& value); ///< \private
void write(std::ostream& out, const ::vnx::Variant& value); ///< \private
void write(std::ostream& out, const ::vnx::access_role_e& value); ///< \private
void write(std::ostream& out, const ::vnx::permission_e& value); ///< \private
void write(std::ostream& out, const ::vnx::record_index_entry_t& value); ///< \private
void write(std::ostream& out, const ::vnx::record_topic_info_t& value); ///< \private
void write(std::ostream& out, const ::vnx::terminal_event_e& value); ///< \private
void write(std::ostream& out, const ::vnx::thread_priority_e& value); ///< \private

void accept(Visitor& visitor, const ::vnx::BaseProxyBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::BaseServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Buffer& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Endpoint& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Exception& value); ///< \private
void accept(Visitor& visitor, const ::vnx::FlowMessage& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Frame& value); ///< \private
void accept(Visitor& visitor, const ::vnx::GatewayBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::GatewayInterface& value); ///< \private
void accept(Visitor& visitor, const ::vnx::GatewayInterface_forward& value); ///< \private
void accept(Visitor& visitor, const ::vnx::GatewayInterface_forward_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Generic& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Hash128& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Hash64& value); ///< \private
void accept(Visitor& visitor, const ::vnx::InternalError& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Error& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Failure& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Notification& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_ProxyBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Proxy_select_service& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Proxy_select_service_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Request& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Response& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_ServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::JRPC_Success& value); ///< \private
void accept(Visitor& visitor, const ::vnx::LogMsg& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Marker& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Memory& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Message& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInfo& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config_object& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config_object_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_module_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_module_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_type_code& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_type_code_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_restart& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_restart_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_self_test& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_self_test_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config_object& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config_object_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_stop& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_stop_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::NoSuchMethod& value); ///< \private
void accept(Visitor& visitor, const ::vnx::NoSuchService& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Object& value); ///< \private
void accept(Visitor& visitor, const ::vnx::OverflowException& value); ///< \private
void accept(Visitor& visitor, const ::vnx::PermissionDenied& value); ///< \private
void accept(Visitor& visitor, const ::vnx::PlayerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_get_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_get_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_pause& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_pause_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_play& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_play_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_by_count& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_by_count_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_by_time& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_by_time_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_to_position& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_to_position_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_to_time& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_seek_to_time_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_set_speed& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_set_speed_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_stop& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_stop_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_toggle& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Player_toggle_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::PlayerStatus& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProcessBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_global_config& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_global_config_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_module_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_module_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_name& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_name_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_process_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_process_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_sync_time& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_sync_time_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_topic_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_get_topic_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_grep_log& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_grep_log_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_journal_log& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_journal_log_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_pause_log& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_pause_log_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_reload_config& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_reload_config_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_resume_log& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_resume_log_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_self_test_all& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_self_test_all_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_set_debug& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_set_debug_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_set_global_config& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_set_global_config_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_show_error_log& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_show_error_log_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_trigger_shutdown& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_trigger_shutdown_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_ungrep_log& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Process_ungrep_log_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProcessInfo& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_export& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_export_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_forward& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_forward_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_import& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_import_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_tunnel& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_tunnel_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_export& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_export_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_forward& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_forward_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_import& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_import_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_tunnel& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_tunnel_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_login& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_login_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_connect& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_connect_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_disconnect& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_disconnect_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_login& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_login_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_connect& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_connect_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_login& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_login_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_connect& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_connect_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_disconnect& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_disconnect_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RecordHeader& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RecordIndex& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RecordPointer& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RecorderBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RecorderStatus& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Request& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RequestQueueBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RequestQueue_clear& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RequestQueue_clear_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RequestQueue_purge& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RequestQueue_purge_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::RouterBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Sample& value); ///< \private
void accept(Visitor& visitor, const ::vnx::ServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Session& value); ///< \private
void accept(Visitor& visitor, const ::vnx::SpyToolBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TcpEndpoint& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TerminalBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Terminal_read_char& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Terminal_read_char_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Terminal_read_event& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Terminal_read_event_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TimeControl& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TimeServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TimeSync& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TopicInfo& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TopicInfoList& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TopicPtr& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Tuple& value); ///< \private
void accept(Visitor& visitor, const ::vnx::TypeCode& value); ///< \private
void accept(Visitor& visitor, const ::vnx::UnixEndpoint& value); ///< \private
void accept(Visitor& visitor, const ::vnx::User& value); ///< \private
void accept(Visitor& visitor, const ::vnx::Variant& value); ///< \private
void accept(Visitor& visitor, const ::vnx::access_role_e& value); ///< \private
void accept(Visitor& visitor, const ::vnx::permission_e& value); ///< \private
void accept(Visitor& visitor, const ::vnx::record_index_entry_t& value); ///< \private
void accept(Visitor& visitor, const ::vnx::record_topic_info_t& value); ///< \private
void accept(Visitor& visitor, const ::vnx::terminal_event_e& value); ///< \private
void accept(Visitor& visitor, const ::vnx::thread_priority_e& value); ///< \private

/// \private
template<>
struct type<::vnx::BaseProxyBase> {
	void read(TypeInput& in, ::vnx::BaseProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::BaseProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::BaseProxyBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::BaseProxyBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::BaseProxyBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::BaseServerBase> {
	void read(TypeInput& in, ::vnx::BaseServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::BaseServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::BaseServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::BaseServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::BaseServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::Buffer> {
	void read(TypeInput& in, ::vnx::Buffer& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Buffer& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Buffer& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Buffer& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Buffer& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Buffer& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Endpoint> {
	void read(TypeInput& in, ::vnx::Endpoint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Endpoint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Endpoint& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Endpoint& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Endpoint& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Endpoint& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Exception> {
	void read(TypeInput& in, ::vnx::Exception& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Exception& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Exception& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Exception& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Exception& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Exception& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::FlowMessage> {
	void read(TypeInput& in, ::vnx::FlowMessage& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::FlowMessage& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::FlowMessage& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::FlowMessage& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::FlowMessage& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::FlowMessage& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Frame> {
	void read(TypeInput& in, ::vnx::Frame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Frame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Frame& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Frame& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Frame& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Frame& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::GatewayBase> {
	void read(TypeInput& in, ::vnx::GatewayBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::GatewayBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::GatewayBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::GatewayBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::GatewayBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::GatewayInterface> {
	void read(TypeInput& in, ::vnx::GatewayInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::GatewayInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::GatewayInterface& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::GatewayInterface& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::GatewayInterface& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::GatewayInterface_forward> {
	void read(TypeInput& in, ::vnx::GatewayInterface_forward& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::GatewayInterface_forward& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::GatewayInterface_forward& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::GatewayInterface_forward& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::GatewayInterface_forward& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::GatewayInterface_forward& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::GatewayInterface_forward_return> {
	void read(TypeInput& in, ::vnx::GatewayInterface_forward_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::GatewayInterface_forward_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::GatewayInterface_forward_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::GatewayInterface_forward_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::GatewayInterface_forward_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::GatewayInterface_forward_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Generic> {
	void read(TypeInput& in, ::vnx::Generic& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Generic& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Generic& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Generic& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Generic& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Generic& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Hash128> {
	void read(TypeInput& in, ::vnx::Hash128& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Hash128& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Hash128& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Hash128& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Hash128& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Hash128& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Hash64> {
	void read(TypeInput& in, ::vnx::Hash64& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Hash64& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Hash64& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Hash64& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Hash64& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Hash64& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::InternalError> {
	void read(TypeInput& in, ::vnx::InternalError& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::InternalError& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::InternalError& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::InternalError& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::InternalError& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::InternalError& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_Error> {
	void read(TypeInput& in, ::vnx::JRPC_Error& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Error& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Error& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Error& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Error& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Error& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_Failure> {
	void read(TypeInput& in, ::vnx::JRPC_Failure& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Failure& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Failure& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Failure& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Failure& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Failure& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_Notification> {
	void read(TypeInput& in, ::vnx::JRPC_Notification& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Notification& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Notification& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Notification& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Notification& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Notification& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_ProxyBase> {
	void read(TypeInput& in, ::vnx::JRPC_ProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_ProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_ProxyBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_ProxyBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_ProxyBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::JRPC_Proxy_select_service> {
	void read(TypeInput& in, ::vnx::JRPC_Proxy_select_service& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Proxy_select_service& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Proxy_select_service& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Proxy_select_service& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Proxy_select_service& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Proxy_select_service& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_Proxy_select_service_return> {
	void read(TypeInput& in, ::vnx::JRPC_Proxy_select_service_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Proxy_select_service_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Proxy_select_service_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Proxy_select_service_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Proxy_select_service_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Proxy_select_service_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_Request> {
	void read(TypeInput& in, ::vnx::JRPC_Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Request& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Request& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Request& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Request& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_Response> {
	void read(TypeInput& in, ::vnx::JRPC_Response& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Response& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Response& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Response& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Response& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Response& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::JRPC_ServerBase> {
	void read(TypeInput& in, ::vnx::JRPC_ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_ServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_ServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_ServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::JRPC_Success> {
	void read(TypeInput& in, ::vnx::JRPC_Success& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::JRPC_Success& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::JRPC_Success& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::JRPC_Success& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::JRPC_Success& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::JRPC_Success& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::LogMsg> {
	void read(TypeInput& in, ::vnx::LogMsg& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::LogMsg& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::LogMsg& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::LogMsg& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::LogMsg& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::LogMsg& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Marker> {
	void read(TypeInput& in, ::vnx::Marker& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Marker& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Marker& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Marker& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Marker& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Marker& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Memory> {
	void read(TypeInput& in, ::vnx::Memory& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Memory& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Memory& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Memory& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Memory& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Memory& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Message> {
	void read(TypeInput& in, ::vnx::Message& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Message& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Message& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Message& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Message& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Message& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInfo> {
	void read(TypeInput& in, ::vnx::ModuleInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInfo& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInfo& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface> {
	void read(TypeInput& in, ::vnx::ModuleInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_config> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_config& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_config_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_config_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_config_object> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config_object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config_object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config_object& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config_object& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config_object& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_config_object& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_config_object_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_config_object_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_config_object_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_config_object_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_config_object_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_config_object_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_config_object_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_module_info> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_module_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_module_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_module_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_module_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_module_info& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_module_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_module_info_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_module_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_module_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_module_info_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_module_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_type_code> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_type_code& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_type_code& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_type_code& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_type_code& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_type_code& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_type_code& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_get_type_code_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_get_type_code_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_get_type_code_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_get_type_code_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_get_type_code_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_get_type_code_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_get_type_code_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_restart> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_restart& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_restart& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_restart& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_restart& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_restart& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_restart& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_restart_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_restart_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_restart_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_restart_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_restart_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_restart_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_restart_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_self_test> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_self_test& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_self_test& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_self_test& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_self_test& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_self_test& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_self_test& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_self_test_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_self_test_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_self_test_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_self_test_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_self_test_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_self_test_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_self_test_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_set_config> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_set_config& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_set_config_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_set_config_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_set_config_object> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config_object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config_object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config_object& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config_object& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config_object& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_set_config_object& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_set_config_object_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_set_config_object_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_set_config_object_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_set_config_object_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_set_config_object_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_set_config_object_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_set_config_object_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_stop> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_stop& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_stop& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_stop& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_stop& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_stop& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_stop& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ModuleInterface_vnx_stop_return> {
	void read(TypeInput& in, ::vnx::ModuleInterface_vnx_stop_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ModuleInterface_vnx_stop_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ModuleInterface_vnx_stop_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ModuleInterface_vnx_stop_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ModuleInterface_vnx_stop_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ModuleInterface_vnx_stop_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::NoSuchMethod> {
	void read(TypeInput& in, ::vnx::NoSuchMethod& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::NoSuchMethod& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::NoSuchMethod& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::NoSuchMethod& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::NoSuchMethod& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::NoSuchMethod& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::NoSuchService> {
	void read(TypeInput& in, ::vnx::NoSuchService& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::NoSuchService& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::NoSuchService& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::NoSuchService& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::NoSuchService& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::NoSuchService& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Object> {
	void read(TypeInput& in, ::vnx::Object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Object& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Object& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Object& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Object& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::OverflowException> {
	void read(TypeInput& in, ::vnx::OverflowException& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::OverflowException& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::OverflowException& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::OverflowException& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::OverflowException& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::OverflowException& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::PermissionDenied> {
	void read(TypeInput& in, ::vnx::PermissionDenied& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::PermissionDenied& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::PermissionDenied& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::PermissionDenied& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::PermissionDenied& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::PermissionDenied& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::PlayerBase> {
	void read(TypeInput& in, ::vnx::PlayerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::PlayerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::PlayerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::PlayerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::PlayerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::Player_get_info> {
	void read(TypeInput& in, ::vnx::Player_get_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_get_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_get_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_get_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_get_info& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_get_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_get_info_return> {
	void read(TypeInput& in, ::vnx::Player_get_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_get_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_get_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_get_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_get_info_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_get_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_pause> {
	void read(TypeInput& in, ::vnx::Player_pause& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_pause& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_pause& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_pause& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_pause& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_pause& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_pause_return> {
	void read(TypeInput& in, ::vnx::Player_pause_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_pause_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_pause_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_pause_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_pause_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_pause_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_play> {
	void read(TypeInput& in, ::vnx::Player_play& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_play& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_play& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_play& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_play& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_play& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_play_return> {
	void read(TypeInput& in, ::vnx::Player_play_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_play_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_play_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_play_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_play_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_play_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_by_count> {
	void read(TypeInput& in, ::vnx::Player_seek_by_count& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_by_count& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_by_count& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_by_count& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_by_count& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_by_count& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_by_count_return> {
	void read(TypeInput& in, ::vnx::Player_seek_by_count_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_by_count_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_by_count_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_by_count_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_by_count_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_by_count_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_by_time> {
	void read(TypeInput& in, ::vnx::Player_seek_by_time& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_by_time& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_by_time& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_by_time& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_by_time& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_by_time& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_by_time_return> {
	void read(TypeInput& in, ::vnx::Player_seek_by_time_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_by_time_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_by_time_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_by_time_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_by_time_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_by_time_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_to_position> {
	void read(TypeInput& in, ::vnx::Player_seek_to_position& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_to_position& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_to_position& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_to_position& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_to_position& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_to_position& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_to_position_return> {
	void read(TypeInput& in, ::vnx::Player_seek_to_position_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_to_position_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_to_position_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_to_position_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_to_position_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_to_position_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_to_time> {
	void read(TypeInput& in, ::vnx::Player_seek_to_time& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_to_time& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_to_time& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_to_time& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_to_time& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_to_time& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_seek_to_time_return> {
	void read(TypeInput& in, ::vnx::Player_seek_to_time_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_seek_to_time_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_seek_to_time_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_seek_to_time_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_seek_to_time_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_seek_to_time_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_set_speed> {
	void read(TypeInput& in, ::vnx::Player_set_speed& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_set_speed& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_set_speed& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_set_speed& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_set_speed& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_set_speed& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_set_speed_return> {
	void read(TypeInput& in, ::vnx::Player_set_speed_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_set_speed_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_set_speed_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_set_speed_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_set_speed_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_set_speed_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_stop> {
	void read(TypeInput& in, ::vnx::Player_stop& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_stop& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_stop& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_stop& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_stop& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_stop& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_stop_return> {
	void read(TypeInput& in, ::vnx::Player_stop_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_stop_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_stop_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_stop_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_stop_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_stop_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_toggle> {
	void read(TypeInput& in, ::vnx::Player_toggle& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_toggle& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_toggle& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_toggle& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_toggle& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_toggle& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Player_toggle_return> {
	void read(TypeInput& in, ::vnx::Player_toggle_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Player_toggle_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Player_toggle_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Player_toggle_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Player_toggle_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Player_toggle_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::PlayerStatus> {
	void read(TypeInput& in, ::vnx::PlayerStatus& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::PlayerStatus& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::PlayerStatus& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::PlayerStatus& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::PlayerStatus& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::PlayerStatus& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProcessBase> {
	void read(TypeInput& in, ::vnx::ProcessBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProcessBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProcessBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProcessBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProcessBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::Process_get_global_config> {
	void read(TypeInput& in, ::vnx::Process_get_global_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_global_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_global_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_global_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_global_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_global_config& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_global_config_return> {
	void read(TypeInput& in, ::vnx::Process_get_global_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_global_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_global_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_global_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_global_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_global_config_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_module_info> {
	void read(TypeInput& in, ::vnx::Process_get_module_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_module_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_module_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_module_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_module_info& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_module_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_module_info_return> {
	void read(TypeInput& in, ::vnx::Process_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_module_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_module_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_module_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_module_info_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_module_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_name> {
	void read(TypeInput& in, ::vnx::Process_get_name& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_name& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_name& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_name& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_name& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_name& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_name_return> {
	void read(TypeInput& in, ::vnx::Process_get_name_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_name_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_name_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_name_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_name_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_name_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_process_info> {
	void read(TypeInput& in, ::vnx::Process_get_process_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_process_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_process_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_process_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_process_info& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_process_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_process_info_return> {
	void read(TypeInput& in, ::vnx::Process_get_process_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_process_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_process_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_process_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_process_info_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_process_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_sync_time> {
	void read(TypeInput& in, ::vnx::Process_get_sync_time& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_sync_time& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_sync_time& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_sync_time& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_sync_time& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_sync_time& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_sync_time_return> {
	void read(TypeInput& in, ::vnx::Process_get_sync_time_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_sync_time_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_sync_time_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_sync_time_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_sync_time_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_sync_time_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_topic_info> {
	void read(TypeInput& in, ::vnx::Process_get_topic_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_topic_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_topic_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_topic_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_topic_info& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_topic_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_get_topic_info_return> {
	void read(TypeInput& in, ::vnx::Process_get_topic_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_get_topic_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_get_topic_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_get_topic_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_get_topic_info_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_get_topic_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_grep_log> {
	void read(TypeInput& in, ::vnx::Process_grep_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_grep_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_grep_log& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_grep_log& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_grep_log& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_grep_log& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_grep_log_return> {
	void read(TypeInput& in, ::vnx::Process_grep_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_grep_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_grep_log_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_grep_log_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_grep_log_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_grep_log_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_journal_log> {
	void read(TypeInput& in, ::vnx::Process_journal_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_journal_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_journal_log& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_journal_log& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_journal_log& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_journal_log& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_journal_log_return> {
	void read(TypeInput& in, ::vnx::Process_journal_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_journal_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_journal_log_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_journal_log_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_journal_log_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_journal_log_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_pause_log> {
	void read(TypeInput& in, ::vnx::Process_pause_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_pause_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_pause_log& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_pause_log& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_pause_log& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_pause_log& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_pause_log_return> {
	void read(TypeInput& in, ::vnx::Process_pause_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_pause_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_pause_log_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_pause_log_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_pause_log_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_pause_log_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_reload_config> {
	void read(TypeInput& in, ::vnx::Process_reload_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_reload_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_reload_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_reload_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_reload_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_reload_config& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_reload_config_return> {
	void read(TypeInput& in, ::vnx::Process_reload_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_reload_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_reload_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_reload_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_reload_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_reload_config_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_resume_log> {
	void read(TypeInput& in, ::vnx::Process_resume_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_resume_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_resume_log& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_resume_log& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_resume_log& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_resume_log& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_resume_log_return> {
	void read(TypeInput& in, ::vnx::Process_resume_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_resume_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_resume_log_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_resume_log_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_resume_log_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_resume_log_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_self_test_all> {
	void read(TypeInput& in, ::vnx::Process_self_test_all& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_self_test_all& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_self_test_all& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_self_test_all& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_self_test_all& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_self_test_all& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_self_test_all_return> {
	void read(TypeInput& in, ::vnx::Process_self_test_all_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_self_test_all_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_self_test_all_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_self_test_all_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_self_test_all_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_self_test_all_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_set_debug> {
	void read(TypeInput& in, ::vnx::Process_set_debug& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_set_debug& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_set_debug& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_set_debug& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_set_debug& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_set_debug& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_set_debug_return> {
	void read(TypeInput& in, ::vnx::Process_set_debug_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_set_debug_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_set_debug_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_set_debug_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_set_debug_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_set_debug_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_set_global_config> {
	void read(TypeInput& in, ::vnx::Process_set_global_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_set_global_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_set_global_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_set_global_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_set_global_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_set_global_config& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_set_global_config_return> {
	void read(TypeInput& in, ::vnx::Process_set_global_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_set_global_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_set_global_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_set_global_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_set_global_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_set_global_config_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_show_error_log> {
	void read(TypeInput& in, ::vnx::Process_show_error_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_show_error_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_show_error_log& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_show_error_log& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_show_error_log& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_show_error_log& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_show_error_log_return> {
	void read(TypeInput& in, ::vnx::Process_show_error_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_show_error_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_show_error_log_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_show_error_log_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_show_error_log_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_show_error_log_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_trigger_shutdown> {
	void read(TypeInput& in, ::vnx::Process_trigger_shutdown& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_trigger_shutdown& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_trigger_shutdown& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_trigger_shutdown& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_trigger_shutdown& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_trigger_shutdown& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_trigger_shutdown_return> {
	void read(TypeInput& in, ::vnx::Process_trigger_shutdown_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_trigger_shutdown_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_trigger_shutdown_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_trigger_shutdown_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_trigger_shutdown_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_trigger_shutdown_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_ungrep_log> {
	void read(TypeInput& in, ::vnx::Process_ungrep_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_ungrep_log& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_ungrep_log& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_ungrep_log& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_ungrep_log& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_ungrep_log& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Process_ungrep_log_return> {
	void read(TypeInput& in, ::vnx::Process_ungrep_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Process_ungrep_log_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Process_ungrep_log_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Process_ungrep_log_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Process_ungrep_log_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Process_ungrep_log_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProcessInfo> {
	void read(TypeInput& in, ::vnx::ProcessInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProcessInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProcessInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProcessInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProcessInfo& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProcessInfo& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyBase> {
	void read(TypeInput& in, ::vnx::ProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::ProxyInterface> {
	void read(TypeInput& in, ::vnx::ProxyInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_export> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_export& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_export& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_export& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_export& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_export& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_export& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_export_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_export_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_export_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_export_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_export_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_export_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_export_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_forward> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_forward& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_forward& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_forward& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_forward& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_forward& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_forward& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_forward_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_forward_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_forward_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_forward_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_forward_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_forward_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_forward_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_import> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_import& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_import& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_import& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_import& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_import& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_import& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_import_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_import_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_import_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_import_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_import_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_import_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_import_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_tunnel> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_tunnel& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_tunnel& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_tunnel& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_tunnel& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_tunnel& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_tunnel& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_disable_tunnel_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_disable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_disable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_disable_tunnel_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_disable_tunnel_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_disable_tunnel_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_disable_tunnel_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_export> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_export& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_export& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_export& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_export& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_export& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_export& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_export_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_export_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_export_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_export_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_export_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_export_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_export_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_forward> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_forward& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_forward& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_forward& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_forward& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_forward& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_forward& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_forward_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_forward_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_forward_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_forward_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_forward_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_forward_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_forward_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_import> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_import& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_import& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_import& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_import& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_import& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_import& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_import_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_import_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_import_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_import_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_import_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_import_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_import_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_tunnel> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_tunnel& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_tunnel& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_tunnel& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_tunnel& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_tunnel& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_tunnel& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_enable_tunnel_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_enable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_enable_tunnel_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_enable_tunnel_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_enable_tunnel_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_enable_tunnel_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_enable_tunnel_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_login> {
	void read(TypeInput& in, ::vnx::ProxyInterface_login& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_login& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_login& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_login& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_login& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_login& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_login_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_login_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_login_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_login_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_login_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_login_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_login_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_connect> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_connect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_connect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_connect& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_connect& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_connect& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_connect& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_connect_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_connect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_connect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_connect_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_connect_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_connect_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_connect_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_disconnect> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_disconnect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_disconnect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_disconnect& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_disconnect& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_disconnect& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_disconnect& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_disconnect_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_disconnect_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_disconnect_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_disconnect_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_disconnect_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_login> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_login& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_login& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_login& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_login& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_login& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_login& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_login_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_login_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_login_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_login_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_login_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_login_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_login_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_remote_connect> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_connect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_connect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_remote_connect& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_connect& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_connect& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_remote_connect& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_remote_connect_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_connect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_connect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_remote_connect_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_connect_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_connect_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_remote_connect_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_remote_login> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_login& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_login& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_remote_login& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_login& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_login& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_remote_login& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_on_remote_login_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_on_remote_login_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_on_remote_login_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_on_remote_login_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_on_remote_login_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_on_remote_login_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_on_remote_login_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_wait_on_connect> {
	void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_connect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_connect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_wait_on_connect& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_connect& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_connect& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_wait_on_connect& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_wait_on_connect_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_connect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_connect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_wait_on_connect_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_connect_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_connect_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_wait_on_connect_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_wait_on_disconnect> {
	void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_disconnect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_disconnect& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_wait_on_disconnect& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_disconnect& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_disconnect& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_wait_on_disconnect& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ProxyInterface_wait_on_disconnect_return> {
	void read(TypeInput& in, ::vnx::ProxyInterface_wait_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ProxyInterface_wait_on_disconnect_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ProxyInterface_wait_on_disconnect_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ProxyInterface_wait_on_disconnect_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ProxyInterface_wait_on_disconnect_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::ProxyInterface_wait_on_disconnect_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RecordHeader> {
	void read(TypeInput& in, ::vnx::RecordHeader& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RecordHeader& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RecordHeader& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RecordHeader& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RecordHeader& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RecordHeader& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RecordIndex> {
	void read(TypeInput& in, ::vnx::RecordIndex& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RecordIndex& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RecordIndex& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RecordIndex& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RecordIndex& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RecordIndex& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RecordPointer> {
	void read(TypeInput& in, ::vnx::RecordPointer& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RecordPointer& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RecordPointer& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RecordPointer& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RecordPointer& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RecordPointer& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RecorderBase> {
	void read(TypeInput& in, ::vnx::RecorderBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RecorderBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RecorderBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RecorderBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RecorderBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::RecorderStatus> {
	void read(TypeInput& in, ::vnx::RecorderStatus& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RecorderStatus& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RecorderStatus& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RecorderStatus& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RecorderStatus& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RecorderStatus& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Request> {
	void read(TypeInput& in, ::vnx::Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Request& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Request& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Request& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Request& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RequestQueueBase> {
	void read(TypeInput& in, ::vnx::RequestQueueBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RequestQueueBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RequestQueueBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RequestQueueBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RequestQueueBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::RequestQueue_clear> {
	void read(TypeInput& in, ::vnx::RequestQueue_clear& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RequestQueue_clear& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RequestQueue_clear& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RequestQueue_clear& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RequestQueue_clear& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RequestQueue_clear& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RequestQueue_clear_return> {
	void read(TypeInput& in, ::vnx::RequestQueue_clear_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RequestQueue_clear_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RequestQueue_clear_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RequestQueue_clear_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RequestQueue_clear_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RequestQueue_clear_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RequestQueue_purge> {
	void read(TypeInput& in, ::vnx::RequestQueue_purge& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RequestQueue_purge& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RequestQueue_purge& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RequestQueue_purge& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RequestQueue_purge& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RequestQueue_purge& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RequestQueue_purge_return> {
	void read(TypeInput& in, ::vnx::RequestQueue_purge_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RequestQueue_purge_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RequestQueue_purge_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RequestQueue_purge_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RequestQueue_purge_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::RequestQueue_purge_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Return> {
	void read(TypeInput& in, ::vnx::Return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::RouterBase> {
	void read(TypeInput& in, ::vnx::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::RouterBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::RouterBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::RouterBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::Sample> {
	void read(TypeInput& in, ::vnx::Sample& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Sample& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Sample& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Sample& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Sample& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Sample& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::ServerBase> {
	void read(TypeInput& in, ::vnx::ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::ServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::ServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::ServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::Session> {
	void read(TypeInput& in, ::vnx::Session& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Session& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Session& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Session& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Session& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Session& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::SpyToolBase> {
	void read(TypeInput& in, ::vnx::SpyToolBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::SpyToolBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::SpyToolBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::SpyToolBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::SpyToolBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::TcpEndpoint> {
	void read(TypeInput& in, ::vnx::TcpEndpoint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TcpEndpoint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TcpEndpoint& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TcpEndpoint& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TcpEndpoint& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TcpEndpoint& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TerminalBase> {
	void read(TypeInput& in, ::vnx::TerminalBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TerminalBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TerminalBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TerminalBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TerminalBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::Terminal_read_char> {
	void read(TypeInput& in, ::vnx::Terminal_read_char& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Terminal_read_char& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Terminal_read_char& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Terminal_read_char& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Terminal_read_char& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Terminal_read_char& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Terminal_read_char_return> {
	void read(TypeInput& in, ::vnx::Terminal_read_char_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Terminal_read_char_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Terminal_read_char_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Terminal_read_char_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Terminal_read_char_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Terminal_read_char_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Terminal_read_event> {
	void read(TypeInput& in, ::vnx::Terminal_read_event& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Terminal_read_event& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Terminal_read_event& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Terminal_read_event& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Terminal_read_event& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Terminal_read_event& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Terminal_read_event_return> {
	void read(TypeInput& in, ::vnx::Terminal_read_event_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Terminal_read_event_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Terminal_read_event_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Terminal_read_event_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Terminal_read_event_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Terminal_read_event_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TimeControl> {
	void read(TypeInput& in, ::vnx::TimeControl& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TimeControl& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TimeControl& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TimeControl& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TimeControl& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TimeControl& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TimeServerBase> {
	void read(TypeInput& in, ::vnx::TimeServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TimeServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TimeServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TimeServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TimeServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::TimeSync> {
	void read(TypeInput& in, ::vnx::TimeSync& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TimeSync& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TimeSync& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TimeSync& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TimeSync& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TimeSync& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TopicInfo> {
	void read(TypeInput& in, ::vnx::TopicInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TopicInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TopicInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TopicInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TopicInfo& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TopicInfo& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TopicInfoList> {
	void read(TypeInput& in, ::vnx::TopicInfoList& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TopicInfoList& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TopicInfoList& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TopicInfoList& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TopicInfoList& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TopicInfoList& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TopicPtr> {
	void read(TypeInput& in, ::vnx::TopicPtr& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TopicPtr& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TopicPtr& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TopicPtr& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TopicPtr& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TopicPtr& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Tuple> {
	void read(TypeInput& in, ::vnx::Tuple& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Tuple& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Tuple& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Tuple& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Tuple& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Tuple& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::TypeCode> {
	void read(TypeInput& in, ::vnx::TypeCode& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::TypeCode& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::TypeCode& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::TypeCode& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::TypeCode& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::TypeCode& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::UnixEndpoint> {
	void read(TypeInput& in, ::vnx::UnixEndpoint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::UnixEndpoint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::UnixEndpoint& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::UnixEndpoint& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::UnixEndpoint& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::UnixEndpoint& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::User> {
	void read(TypeInput& in, ::vnx::User& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::User& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::User& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::User& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::User& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::User& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::Variant> {
	void read(TypeInput& in, ::vnx::Variant& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::Variant& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::Variant& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::Variant& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::Variant& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::Variant& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::access_role_e> {
	void read(TypeInput& in, ::vnx::access_role_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::access_role_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::access_role_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::access_role_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::access_role_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::access_role_e& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::permission_e> {
	void read(TypeInput& in, ::vnx::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::permission_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::permission_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::permission_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::permission_e& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::record_index_entry_t> {
	void read(TypeInput& in, ::vnx::record_index_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::record_index_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::record_index_entry_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::record_index_entry_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::record_index_entry_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::record_index_entry_t& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::record_topic_info_t> {
	void read(TypeInput& in, ::vnx::record_topic_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::record_topic_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::record_topic_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::record_topic_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::record_topic_info_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::record_topic_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::terminal_event_e> {
	void read(TypeInput& in, ::vnx::terminal_event_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::terminal_event_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::terminal_event_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::terminal_event_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::terminal_event_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::terminal_event_e& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::thread_priority_e> {
	void read(TypeInput& in, ::vnx::thread_priority_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::thread_priority_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::thread_priority_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::thread_priority_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::thread_priority_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::thread_priority_e& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_vnx_PACKAGE_HXX_
