
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_permission_e_HXX_
#define INCLUDE_vnx_permission_e_HXX_

#include <vnx/Type.h>
#include <vnx/package.hxx>


namespace vnx {

struct permission_e {
	
	enum enum_t {
		CONST_REQUEST = 1076482563l,
		HOST_SHUTDOWN = 1124463389l,
		INTERNAL = 1861063121l,
		LOCAL = 3393177819l,
		PROTECTED_CONFIG = 2082950745l,
		PROXY_EXPORT = 790344897l,
		PROXY_FORWARD = 1111657009l,
		PROXY_IMPORT = 191875899l,
		PROXY_INTERNAL = 3742832289l,
		PUBLISH = 1338854341l,
		READ_CONFIG = 3203297939l,
		REQUEST = 3218098657l,
		RESTART = 3809341088l,
		SELF_TEST = 3038921719l,
		SHUTDOWN = 1988203803l,
		START = 4082106084l,
		STOP = 883186718l,
		TIME_SYNC = 3725394100l,
		VIEW = 3695368648l,
		WRITE_CONFIG = 212794352l,
	};
	
	enum_t value = ::vnx::permission_e::enum_t(0);
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	permission_e() {}
	permission_e(const enum_t& _value) { value = _value; }
	permission_e(const ::vnx::permission_e& _other) { value = _other.value; }
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	operator enum_t() const { return value; }
	permission_e& operator=(const enum_t& _value) { value = _value; return *this; }
	permission_e& operator=(const ::vnx::permission_e& _other) { value = _other.value; return *this; }
	
	static std::shared_ptr<permission_e> create();
	std::shared_ptr<permission_e> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	std::string to_string() const;
	std::string to_string_value() const;
	std::string to_string_value_full() const;
	
	void from_string(const std::string& str);
	void from_string_value(const std::string& name);
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const permission_e& _value);
	friend std::istream& operator>>(std::istream& _in, permission_e& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace vnx


namespace vnx {

void read(TypeInput& in, ::vnx::permission_e::enum_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::vnx::permission_e::enum_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

template<>
std::string to_string(const ::vnx::permission_e& _value); ///< \private

template<>
std::string to_string_value(const ::vnx::permission_e& _value); ///< \private

template<>
std::string to_string_value_full(const ::vnx::permission_e& _value); ///< \private

template<>
std::string to_string(const ::vnx::permission_e::enum_t& _value); ///< \private

template<>
std::string to_string_value(const ::vnx::permission_e::enum_t& _value); ///< \private

template<>
std::string to_string_value_full(const ::vnx::permission_e::enum_t& _value); ///< \private

} // vnx

#endif // INCLUDE_vnx_permission_e_HXX_
